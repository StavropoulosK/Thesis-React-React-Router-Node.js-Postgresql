import "./payment.css"
import TopBar from "../../reusableComponents/topBar/TopBar";
import { useLocation,redirect,useNavigate,useLoaderData,Form,useNavigation,useActionData  } from 'react-router-dom';
import { useTranslation } from "react-i18next";
import { useState, useRef} from "react";


export async function paymentLoader({request,params}){

    let data        

    try {

        const response = await fetch('/api/getCostOfLessonsInCart')
    if (!response.ok) {
        // user is not logged in
        const params = new URLSearchParams(window.location.search);
        const newParams=new URLSearchParams()
        newParams.set("fromPage", window.location.pathname+"?"+params.toString());
        
        return redirect("/login?" + newParams.toString());
    }

    data = await response.json();


    }
    catch (error) {
        console.error('Error connecting to server', error);
        throw error;
    }

    return data.cost
}

export async function paymentAction({request,params}){
    const formData= await request.formData()
    const {cardHolderName,cardNumber,expirationDate,cvv}= Object.fromEntries(formData)


    let data

    try {
        const response = await fetch('/api/payLessonsInCart', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            cardHolderName,cardNumber,expirationDate,cvv
          })
        });

        if (!response.ok) {
            // user is not logged in
            const params = new URLSearchParams(window.location.search);
            const newParams=new URLSearchParams()
            newParams.set("fromPage", window.location.pathname+"?"+params.toString());
            
            redirect("/login?" + newParams.toString());
            return -1
        }

        data = await response.json();

    
      } catch (error) {
        console.error('Error:', error);
        throw error;


      }

      return data.message


}


export function Payment(){
    const location = useLocation();
    const { fromPage } = location.state || {};

    const cost= useLoaderData()

    const costRef= useRef(null)

    if(costRef.current==null){
        costRef.current=cost
    }

    const navigate = useNavigate();

    const {t, i18n} = useTranslation("payment")

    const [formData, setFormData] = useState({
        cardHolderName:"",
        cardNumber:"",
        expirationDate: "",
        cvv:"",
    });

    const [paymentDone,setPaymentDone]=useState(false)

    const actionMessage=useActionData()

    if(actionMessage=="payment_succeeded" && !paymentDone){
        setPaymentDone(true)
    }

    const [message,setMessage]=useState("")

    const navigation = useNavigation();

    const [errors, setErrors] = useState({
        cardHolderName:"",
        cardNumber:"",
        expirationDate: "",
        cvv:"",
    });

    const handleChange = (e) => {
        const { name, value } = e.target;

        if(name=="cardHolderName"){

            // remove digits
            const containsDigits = /\d/.test(value);

            if(containsDigits){
                return
            }

            if(value.length==40){
                //max length
                return
            }

            setFormData({ ...formData, [name]: value });


        }

        else if(name=="cardNumber"){

            //remove non digits
            const rawValue = value.replace(/\D/g, "");

            if(rawValue.length==17){
                return
            }

            const formattedValue = rawValue.match(/.{1,4}/g)?.join(" ") || "";


            setFormData((prevData) => ({
              ...prevData,
              [name]: formattedValue,
            }));
        }

        else if(name=="cvv"){

            //remove non digits
            const rawValue = value.replace(/\D/g, "");

            if(rawValue.length==4){
                return
            }

            setFormData((prevData) => ({
              ...prevData,
              [name]: rawValue,
            }));
        }

        else if (name === "expirationDate") {
            // Remove all non-digit characters
            let rawValue = value.replace(/\D/g, "");
    
            if (rawValue.length > 4) {
                return
            }

            if (rawValue.length === 1 && rawValue !== "1" && rawValue !=="0") {

                rawValue = "0" + rawValue;
            }
    
            // Format as MM/YY
            let formattedValue = rawValue;
            if (rawValue.length >= 2) {
            
                if(formData.expirationDate.length=="4" && rawValue.length==2){
                    //user is deleting, do not add slash
                    formattedValue = `${rawValue.slice(0, 2)}${rawValue.slice(2)}`;

                }
                else{
                    // automatically add slash
                    formattedValue = `${rawValue.slice(0, 2)}/${rawValue.slice(2)}`;

                }
            }
    
            setFormData({ ...formData, [name]: formattedValue });
            return;
        }
       
        
    };

    const handleBlur = (e) => {
        const { name, value } = e.target;
      
        let newErrors = { ...errors };
      
        if (name === "cardNumber") {
            const valueNoSpaces = value.replace(/\s/g, ""); // remove spaces

            if(valueNoSpaces.length==0){
                return
            }


            if (valueNoSpaces.length !== 16) {
                newErrors.cardNumber = "16_Digits";
            }
           else {
                newErrors.cardNumber = ""; // valid input
            }
      
          setErrors(newErrors);
        }

        else if(name=="cvv"){

            if(value.length==0){
                return
            }


            if (value.length !== 3) {
                newErrors.cvv = "3_digits";
            }
            else{
                newErrors.cvv = "";

            }

            setErrors(newErrors);

            
        }

        else if(name=="expirationDate"){

            if(value.length==0){
                return
            }


            if(value.length!==5){
                newErrors.expirationDate = "wrong_input";

            }
            else{
                newErrors.expirationDate = "";

            }

            setErrors(newErrors);

        }


      
    };

    function handleSubmit(ev){

        let fail=false
        if(submitting || paymentDone || cost==0){
            ev.preventDefault()
            return
        }

        const newErrors = {};

        // Card Number check
        const cardNumberNoSpaces = formData.cardNumber.replace(/\s/g, "");
        if (!cardNumberNoSpaces) {
            newErrors.cardNumber = "required";
            fail=true
        } else if (cardNumberNoSpaces.length !== 16) {
            newErrors.cardNumber = "16_Digits";
            fail=true

        } else {
            newErrors.cardNumber = "";
        }

        // CVV check
        if (!formData.cvv) {
            newErrors.cvv = "required";
            fail=true

        } else if (formData.cvv.length !== 3) {
            newErrors.cvv = "3_digits";
            fail=true

        } else {
            newErrors.cvv = "";
        }

        // Expiration Date check
        if (!formData.expirationDate) {
            newErrors.expirationDate = "required";
            fail=true

        } else if (formData.expirationDate.length !== 5 || !/^\d{2}\/\d{2}$/.test(formData.expirationDate)) {
            newErrors.expirationDate = "wrong_input";
            fail=true

        } else {
            newErrors.expirationDate = "";
        }

        // Card Holder Name check
        if (!formData.cardHolderName) {
            newErrors.cardHolderName = "required";
            fail=true

        } else {
            newErrors.cardHolderName = "";
        }

        setErrors(newErrors);

        if(fail){
            setMessage("payment_failed")
            ev.preventDefault()
        }

    }

    const submitting=navigation.state === "submitting" || navigation.state === "loading"

    
    return(

        <>
              <TopBar completed={4}></TopBar>

              

              <section className="payment">

                
                    <button className={`back`} onClick={()=>{

                        navigate('/overview', {
                            state: {
                            fromPage: fromPage,
                            },
                        });
                        
                    }
                    }>

                        <svg xmlns="http://www.w3.org/2000/svg" width={24} height={24} viewBox="0 0 24 24"><path fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 20V4m0 0l6 6m-6-6l-6 6"></path></svg>


                        {t("return")}
                    </button>
                    




                    <div className="content">

                        <svg className="snowGlobe" xmlns="http://www.w3.org/2000/svg" width="644.87173" height="547" viewBox="0 0 644.87173 547" xmlnsXlink="http://www.w3.org/1999/xlink" role="img" artist="Katerina Limpitsouni" source="https://undraw.co/"><path d="M864,665.5H336V440.49951a264,264,0,0,1,528,0Z" transform="translate(-277.56413 -176.5)" fill="#e6e6e6"/><path d="M469.41536,655.60632a.7188.7188,0,0,0,.71906-.71858V353.59883a.71907.71907,0,0,0-1.43813,0V654.88774A.71881.71881,0,0,0,469.41536,655.60632Z" transform="translate(-277.56413 -176.5)" fill="#3f3d56"/><path d="M469.41536,411.7648a.717.717,0,0,0,.50849-.21052L504.53572,376.966a.71881.71881,0,0,0-1.017-1.01611l-34.61187,34.58829a.71858.71858,0,0,0,.50849,1.22663Z" transform="translate(-277.56413 -176.5)" fill="#3f3d56"/><path d="M469.41536,471.64407a.71858.71858,0,0,0,.50849-1.22664L411.96,412.49251a.71881.71881,0,0,0-1.017,1.01611l57.96386,57.92493A.71721.71721,0,0,0,469.41536,471.64407Z" transform="translate(-277.56413 -176.5)" fill="#3f3d56"/><path d="M556.86357,442.99859c0-48.26367-39.15191-162.791-87.44824-162.791s-87.44825,114.52731-87.44825,162.791a87.44827,87.44827,0,0,0,174.89649,0Z" transform="translate(-277.56413 -176.5)" fill="#fff"/><path d="M426.70709,311.58769a125.55359,125.55359,0,0,0,68.86227,9.14942,121.11847,121.11847,0,0,0,19.16953-4.48087l-1.694-2.2035a153.022,153.022,0,0,1-38.04812,41.3687,159.23075,159.23075,0,0,1-50.04014,25.283,149.989,149.989,0,0,1-31.16616,5.80893,1.52057,1.52057,0,0,0-1.06066,2.56066,137.51977,137.51977,0,0,0,54.58977,36.75559A136.51562,136.51562,0,0,0,554.78,419.53946l-2.05228-2.05229a144.15363,144.15363,0,0,1-47.66659,49.38442A153.1866,153.1866,0,0,1,440.46454,489.977a139.484,139.484,0,0,1-38.745-.90378c-1.88852-.31576-2.70044,2.57466-.79752,2.89284a147.35911,147.35911,0,0,0,69.79342-5.57471,156.56233,156.56233,0,0,0,60.16319-36.08094,142.338,142.338,0,0,0,24.43944-31.309,1.5124,1.5124,0,0,0-2.05228-2.05229A134.48071,134.48071,0,0,1,484.945,430.72739a133.61961,133.61961,0,0,1-90.09378-43.77466l-1.06066,2.56066a156.93734,156.93734,0,0,0,55.393-14.95117A161.5603,161.5603,0,0,0,495.7739,341.0376a153.78542,153.78542,0,0,0,19.86144-25.4707,1.51541,1.51541,0,0,0-1.694-2.2035,122.177,122.177,0,0,1-67.477,1.92753,118.91015,118.91015,0,0,1-18.2431-6.29365c-1.75068-.77036-3.27927,1.8137-1.51416,2.59041Z" transform="translate(-277.56413 -176.5)" fill="#f2f2f2"/><circle cx="165.43589" cy="140" r="4.5" fill="#388e83"/><circle cx="197.43589" cy="143" r="4.5" fill="#388e83"/><circle cx="225.43589" cy="155" r="4.5" fill="#388e83"/><circle cx="201.43589" cy="176" r="4.5" fill="#388e83"/><circle cx="174.43589" cy="196" r="4.5" fill="#388e83"/><circle cx="136.43589" cy="209" r="4.5" fill="#388e83"/><circle cx="156.43589" cy="242" r="4.5" fill="#388e83"/><circle cx="202.43589" cy="256" r="4.5" fill="#388e83"/><circle cx="202.43589" cy="256" r="4.5" fill="#388e83"/><circle cx="242.43589" cy="254" r="4.5" fill="#388e83"/><circle cx="229.43589" cy="292" r="4.5" fill="#388e83"/><circle cx="188.43589" cy="309" r="4.5" fill="#388e83"/><circle cx="145.43589" cy="317" r="4.5" fill="#388e83"/><circle cx="195.93589" cy="73.5" r="10" fill="#fff"/><circle cx="505.93589" cy="256.5" r="10" fill="#fff"/><circle cx="125.93589" cy="376.5" r="10" fill="#fff"/><circle cx="278.93589" cy="87.5" r="10" fill="#fff"/><circle cx="547.93589" cy="418.5" r="10" fill="#fff"/><circle cx="359.93589" cy="285.5" r="10" fill="#fff"/><circle cx="389.93589" cy="186.5" r="10" fill="#fff"/><circle cx="251.93589" cy="398.5" r="10" fill="#fff"/><path d="M722.69527,646.128h-16.5a9.03555,9.03555,0,0,1-6.56763-2.84619,8.93106,8.93106,0,0,1-2.41309-6.75195,9.17109,9.17109,0,0,1,9.272-8.40186h3.70874v-20h22v28.5A9.51081,9.51081,0,0,1,722.69527,646.128Z" transform="translate(-277.56413 -176.5)" fill="#fff"/><path d="M717.41687,557.23153,697.51649,555.238a11.00025,11.00025,0,0,1,2.19279-21.89094l19.90038,1.99356a11.00038,11.00038,0,0,1,5.8676,19.46047,11.11216,11.11216,0,0,1-1.58379,1.08283A10.92159,10.92159,0,0,1,717.41687,557.23153Z" transform="translate(-277.56413 -176.5)" fill="#fff"/><path d="M667.27036,541.15234l0-.00006a10.49994,10.49994,0,0,1,11.49443-9.401l1.14321-.07375-1.76484-1.71005a2.49979,2.49979,0,1,1,3.47894-3.59064l5.02244,4.86606,7.59852-.49028a4.00007,4.00007,0,0,1,4.257,3.9252l.29909,17.98126a3.99984,3.99984,0,0,1-4.89888,3.964l-17.22915-3.97633A10.50007,10.50007,0,0,1,667.27036,541.15234Z" transform="translate(-277.56413 -176.5)" fill="#3f3d56"/><ellipse cx="456.63113" cy="396.12795" rx="41.5" ry="50" fill="#fff"/><ellipse cx="433.13113" cy="391.02795" rx="3" ry="5.1" fill="#3f3d56"/><ellipse cx="432.13113" cy="405.22795" rx="3" ry="5.1" fill="#3f3d56"/><circle cx="456.13113" cy="325.12795" r="32" fill="#fff"/><path d="M760.69527,492.128h-53a6.50736,6.50736,0,0,1-6.5-6.5v-5c0-16.84277,17.05053-32.5,35.5-32.5s29.5,15.65723,29.5,32.5v6A5.50622,5.50622,0,0,1,760.69527,492.128Z" transform="translate(-277.56413 -176.5)" fill="#3f3d56"/><circle cx="460.13113" cy="272.12795" r="8" fill="#388e83"/><circle cx="448.63113" cy="322.62795" r="3" fill="#3f3d56"/><circle cx="431.63113" cy="322.62795" r="3" fill="#3f3d56"/><path d="M759.19527,646.128h-16.5a9.51081,9.51081,0,0,1-9.5-9.5v-28.5h22v20H758.904a9.17109,9.17109,0,0,1,9.272,8.40186,8.931,8.931,0,0,1-2.41309,6.75195A9.03551,9.03551,0,0,1,759.19527,646.128Z" transform="translate(-277.56413 -176.5)" fill="#fff"/><path d="M719.53706,511.06008c-.02856,0-.05713-.00037-.08593-.00187l-27.594-1.20693a1.36129,1.36129,0,0,1-1.40649-1.02758c-.07739-.57283.376-1.07728,1.10229-1.22674l26.38355-5.4301a1.9016,1.9016,0,0,1,1.21728.15133,1.16246,1.16246,0,0,1,.65772.7989l1.21045,6.63629a.98145.98145,0,0,1-.38208.9364A1.73391,1.73391,0,0,1,719.53706,511.06008Z" transform="translate(-277.56413 -176.5)" fill="#ff6584"/><path d="M720.33356,514.24543c-4.13513,0-8.01231-2.63214-8.01231-.42767s3.87715,8.41083,8.01231,8.41083,7.86171-4.3531,7.86171-6.5576S724.46869,514.24543,720.33356,514.24543Z" transform="translate(-277.56413 -176.5)" fill="#e6e6e6"/><path d="M694.058,602.59012l-61.41977,17.7287a7.61193,7.61193,0,0,1-9.41311-5.19618l-16.31837-56.53378a7.61191,7.61191,0,0,1,5.19617-9.41311l61.41977-17.7287a7.61192,7.61192,0,0,1,9.41312,5.19617L699.25416,593.177A7.61192,7.61192,0,0,1,694.058,602.59012Z" transform="translate(-277.56413 -176.5)" fill="#388e83"/><path d="M668.45364,612.42365l-8.91009,2.57188a4.02945,4.02945,0,0,1-4.98342-2.75091L635.064,544.70184a4.02943,4.02943,0,0,1,2.75091-4.98341l8.91009-2.57188a4.02943,4.02943,0,0,1,4.98341,2.75091l19.4961,67.54278A4.02943,4.02943,0,0,1,668.45364,612.42365Z" transform="translate(-277.56413 -176.5)" fill="#3f3d56"/><path d="M636.06783,525.43837c6.28924,2.871,7.65134,13.38334,7.65134,13.38334s-8.83483,5.85748-15.12413,2.98649-7.65134-13.38334-7.65134-13.38334S629.77857,522.56731,636.06783,525.43837Z" transform="translate(-277.56413 -176.5)" fill="#3f3d56"/><path d="M656.31362,532.77761c-2.85138,6.29818-13.35942,7.69307-13.35942,7.69307s-5.885-8.81653-3.03365-15.11472S653.28,517.66289,653.28,517.66289,659.165,526.47943,656.31362,532.77761Z" transform="translate(-277.56413 -176.5)" fill="#3f3d56"/><path d="M733.05835,565.46292,713.959,571.39716a11.00025,11.00025,0,0,1-6.528-21.00969l19.09933-5.93424a11.00038,11.00038,0,0,1,12.99975,15.62515,11.11191,11.11191,0,0,1-1.03534,1.61524A10.92148,10.92148,0,0,1,733.05835,565.46292Z" transform="translate(-277.56413 -176.5)" fill="#f2f2f2"/><path d="M680.614,570.23822l0,0a10.49993,10.49993,0,0,1,6.91182-13.14256l1.02369-.51424-2.29242-.8853a2.49978,2.49978,0,1,1,1.801-4.66393l6.52366,2.519,6.80406-3.418a4.00007,4.00007,0,0,1,5.45162,1.95165L714.133,568.5222a3.99984,3.99984,0,0,1-2.96242,5.56208l-17.41422,3.06592A10.50007,10.50007,0,0,1,680.614,570.23822Z" transform="translate(-277.56413 -176.5)" fill="#3f3d56"/><path d="M522.16348,647.874H489.98617a3.8314,3.8314,0,0,1-3.82684-3.82684V614.42957a3.8314,3.8314,0,0,1,3.82684-3.82684h32.17731a3.8314,3.8314,0,0,1,3.82684,3.82684v29.61758A3.8314,3.8314,0,0,1,522.16348,647.874Z" transform="translate(-277.56413 -176.5)" fill="#fff"/><path d="M508.40857,649.05537h-4.66793a2.02819,2.02819,0,0,1-2.026-2.026V611.6443a2.02819,2.02819,0,0,1,2.026-2.026h4.66793a2.02819,2.02819,0,0,1,2.026,2.026v35.3851A2.02819,2.02819,0,0,1,508.40857,649.05537Z" transform="translate(-277.56413 -176.5)" fill="#3f3d56"/><path d="M504.88909,602.46862c2.64071,2.26633,1.832,7.54022,1.832,7.54022s-5.09016,1.59942-7.7309-.66691-1.832-7.54023-1.832-7.54023S502.24838,600.20226,504.88909,602.46862Z" transform="translate(-277.56413 -176.5)" fill="#3f3d56"/><path d="M513.65546,608.844c-2.25809,2.64777-7.53448,1.85552-7.53448,1.85552s-1.6153-5.08516.64279-7.73293,7.53448-1.85553,7.53448-1.85553S515.91355,606.19621,513.65546,608.844Z" transform="translate(-277.56413 -176.5)" fill="#3f3d56"/><path d="M440.157,648.1807H416.33336A2.83672,2.83672,0,0,1,413.5,645.34736V623.41892a2.83672,2.83672,0,0,1,2.83334-2.83334H440.157a2.83672,2.83672,0,0,1,2.83334,2.83334v21.92844A2.83672,2.83672,0,0,1,440.157,648.1807Z" transform="translate(-277.56413 -176.5)" fill="#fff"/><path d="M429.973,649.05537H426.517a1.50165,1.50165,0,0,1-1.5-1.5V621.35675a1.50165,1.50165,0,0,1,1.5-1.5H429.973a1.50164,1.50164,0,0,1,1.5,1.5v26.19862A1.50164,1.50164,0,0,1,429.973,649.05537Z" transform="translate(-277.56413 -176.5)" fill="#3f3d56"/><path d="M427.36727,614.5632c1.95514,1.678,1.35639,5.58268,1.35639,5.58268s-3.76869,1.18418-5.72385-.49378-1.35639-5.58267-1.35639-5.58267S425.41213,612.88522,427.36727,614.5632Z" transform="translate(-277.56413 -176.5)" fill="#3f3d56"/><path d="M433.85776,619.28343c-1.67186,1.96037-5.57842,1.3738-5.57842,1.3738s-1.19595-3.765.47591-5.72535,5.57842-1.37381,5.57842-1.37381S435.52962,617.32306,433.85776,619.28343Z" transform="translate(-277.56413 -176.5)" fill="#3f3d56"/><path d="M903.93484,723.5H296.06509a18.49992,18.49992,0,0,1-18.27356-21.38525l6.31579-40A18.41321,18.41321,0,0,1,302.38088,646.5H897.61916a18.4136,18.4136,0,0,1,18.27368,15.61475l6.31568,40A18.49975,18.49975,0,0,1,903.93484,723.5Z" transform="translate(-277.56413 -176.5)" fill="#3f3d56"/></svg>


                        <div className="cardInfoContainer">

                            <svg className="credit" viewBox="0 0 293 266" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <g clipPath="url(#clip0_237_778)">
                                <path d="M252.508 24.4589L7 95.6573L13.5028 117.873L259.011 46.6741L252.508 24.4589Z" fill="#3F3D56"/>
                                <path d="M36.3323 197.7L0.14631 74.0799C-0.121963 73.1634 -0.0134546 72.1783 0.447949 71.3414C0.909352 70.5045 1.68586 69.8844 2.60665 69.6173L242.163 0.144755C243.084 -0.121374 244.073 -0.013004 244.914 0.44609C245.754 0.905184 246.378 1.67749 246.647 2.59348L278.705 112.112L277.713 112.4L245.655 2.88121C245.462 2.2272 245.017 1.67587 244.417 1.34799C243.816 1.02012 243.11 0.942434 242.452 1.13197L2.89566 70.6045C2.23795 70.7953 1.68331 71.2383 1.35373 71.8361C1.02416 72.4339 0.946653 73.1375 1.13827 73.7922L37.3243 197.412L36.3323 197.7Z" fill="#3F3D56"/>
                                <path d="M225.683 112.621C224.956 112.62 224.249 112.385 223.667 111.951C223.086 111.517 222.661 110.907 222.457 110.213L216.388 89.4786C216.14 88.6276 216.241 87.7134 216.669 86.9365C217.098 86.1597 217.818 85.5837 218.672 85.3348L239.504 79.2938C240.359 79.0469 241.277 79.1476 242.058 79.574C242.838 80.0004 243.417 80.7175 243.667 81.568L249.736 102.302C249.984 103.153 249.883 104.067 249.454 104.844C249.026 105.621 248.306 106.197 247.451 106.446L226.62 112.487C226.316 112.576 226 112.621 225.683 112.621Z" fill="#0B0C0C"/>
                                <path d="M35.773 74.4621C35.7107 74.249 35.6365 74.0396 35.5508 73.8347C34.9684 72.4277 33.8841 71.2845 32.5062 70.6248C31.1284 69.9652 29.5543 69.8356 28.0863 70.261C26.6183 70.6864 25.3601 71.6368 24.5534 72.9295C23.7466 74.2222 23.4483 75.7661 23.7157 77.2644C23.7532 77.4831 23.8033 77.6994 23.8655 77.9123C24.2427 79.194 25.027 80.3196 26.1007 81.1205C27.1745 81.9214 28.48 82.3545 29.8218 82.355C30.4076 82.3563 30.9905 82.2732 31.5524 82.1082C33.1296 81.6495 34.4596 80.587 35.2508 79.1536C36.042 77.7202 36.2298 76.033 35.773 74.4621ZM31.2631 81.1209C29.9479 81.5009 28.5349 81.3462 27.3341 80.6907C26.1332 80.0352 25.2426 78.9325 24.8573 77.6244C24.7969 77.4113 24.7485 77.195 24.7126 76.9765C24.5188 75.742 24.7834 74.4795 25.457 73.425C26.1305 72.3706 27.1668 71.5965 28.3722 71.2474C29.5775 70.8983 30.8694 70.9982 32.0061 71.5283C33.1429 72.0584 34.0467 72.9825 34.5486 74.1278C34.6422 74.3289 34.7199 74.5369 34.7812 74.75C35.1624 76.0592 35.006 77.4655 34.3464 78.66C33.6868 79.8545 32.5779 80.7396 31.2631 81.1209Z" fill="#0B0C0C"/>
                                <path d="M20.5684 78.8688C20.2378 77.7387 20.2695 76.5341 20.6592 75.4228C21.0489 74.3116 21.7771 73.3489 22.7424 72.6691C21.838 72.6252 20.9362 72.7971 20.1121 73.1703C19.288 73.5436 18.5654 74.1075 18.0046 74.815C17.4437 75.5226 17.0609 76.3532 16.8879 77.2379C16.7149 78.1225 16.7568 79.0355 17.0101 79.9007C17.2633 80.766 17.7207 81.5585 18.344 82.2122C18.9672 82.8659 19.7385 83.3619 20.5933 83.6588C21.4482 83.9558 22.362 84.0451 23.2586 83.9194C24.1551 83.7937 25.0086 83.4565 25.7477 82.936C24.5666 82.8786 23.4329 82.456 22.5045 81.7269C21.5761 80.9979 20.8993 79.9988 20.5684 78.8688Z" fill="#0B0C0C"/>
                                <path d="M181.16 104.352C181.05 103.959 180.863 103.591 180.61 103.269C180.357 102.948 180.043 102.679 179.685 102.478C179.328 102.278 178.934 102.149 178.527 102.1C178.119 102.051 177.706 102.083 177.311 102.193L143.014 111.741L139.32 112.77H162.516L166.209 111.741L178.995 108.183C179.792 107.96 180.468 107.432 180.874 106.714C181.279 105.995 181.382 105.146 181.16 104.352Z" fill="#CCCCCC"/>
                                <path d="M156.894 97.2206C156.671 96.427 156.14 95.7542 155.418 95.3501C154.696 94.9461 153.843 94.8439 153.046 95.0661L101.582 109.392C100.863 109.594 100.24 110.046 99.8265 110.666C99.4125 111.285 99.2345 112.031 99.3246 112.77H112.648L116.346 111.742L154.73 101.057C155.528 100.833 156.204 100.303 156.609 99.5842C157.015 98.865 157.118 98.0149 156.894 97.2206Z" fill="#CCCCCC"/>
                                <path d="M289.384 111.74H39.8662C38.9075 111.741 37.9883 112.121 37.3103 112.796C36.6324 113.471 36.2511 114.385 36.25 115.34V262.401C36.251 263.355 36.6324 264.27 37.3103 264.945C37.9882 265.619 38.9074 265.999 39.8662 266H289.384C290.343 265.999 291.262 265.619 291.94 264.945C292.618 264.27 292.999 263.355 293 262.401V115.34C292.999 114.385 292.618 113.471 291.94 112.796C291.262 112.121 290.343 111.741 289.384 111.74ZM291.967 262.401C291.967 263.082 291.695 263.736 291.21 264.218C290.726 264.7 290.069 264.971 289.384 264.972H39.8662C39.1812 264.971 38.5244 264.7 38.04 264.218C37.5557 263.736 37.2834 263.082 37.2832 262.401V115.34C37.2835 114.658 37.5557 114.004 38.0401 113.522C38.5244 113.04 39.1812 112.769 39.8662 112.769H289.384C290.069 112.769 290.726 113.04 291.21 113.522C291.695 114.004 291.967 114.658 291.967 115.34V262.401Z" fill="#3F3D56"/>
                                <path d="M64.1445 131.795C62.9184 131.795 61.7199 131.433 60.7004 130.755C59.681 130.077 58.8864 129.114 58.4172 127.986C57.948 126.859 57.8252 125.618 58.0644 124.421C58.3036 123.224 58.894 122.125 59.761 121.262C60.628 120.399 61.7326 119.811 62.9351 119.573C64.1376 119.335 65.3841 119.457 66.5168 119.924C67.6496 120.391 68.6178 121.182 69.299 122.197C69.9801 123.211 70.3437 124.404 70.3437 125.625C70.3418 127.261 69.6881 128.829 68.5259 129.986C67.3638 131.143 65.7881 131.793 64.1445 131.795ZM64.1445 120.483C63.1228 120.483 62.124 120.784 61.2744 121.349C60.4249 121.914 59.7628 122.718 59.3718 123.657C58.9808 124.597 58.8785 125.631 59.0778 126.628C59.2771 127.625 59.7691 128.542 60.4916 129.261C61.2141 129.98 62.1346 130.47 63.1367 130.668C64.1388 130.866 65.1775 130.765 66.1214 130.375C67.0654 129.986 67.8722 129.327 68.4399 128.482C69.0075 127.636 69.3105 126.642 69.3105 125.625C69.309 124.262 68.7642 122.955 67.7957 121.991C66.8272 121.027 65.5141 120.484 64.1445 120.483Z" fill="#0B0C0C"/>
                                <path d="M54.509 125.625C54.5092 124.448 54.8782 123.3 55.5646 122.342C56.2511 121.383 57.2208 120.662 58.3386 120.278C57.4826 119.984 56.5685 119.898 55.6724 120.027C54.7763 120.156 53.9241 120.496 53.1868 121.019C52.4495 121.542 51.8485 122.233 51.4338 123.034C51.0191 123.835 50.8027 124.724 50.8027 125.625C50.8027 126.526 51.0191 127.414 51.4338 128.215C51.8485 129.017 52.4495 129.707 53.1868 130.231C53.9241 130.754 54.7763 131.094 55.6724 131.223C56.5685 131.352 57.4826 131.266 58.3386 130.972C57.2208 130.588 56.2511 129.866 55.5646 128.908C54.8782 127.949 54.5092 126.802 54.509 125.625Z" fill="#0B0C0C"/>
                                <path d="M89.2734 198.527C88.0408 198.526 86.859 198.038 85.9873 197.17C85.1157 196.302 84.6254 195.126 84.624 193.899V180.016C84.624 178.788 85.1139 177.611 85.9858 176.744C86.8577 175.876 88.0403 175.388 89.2734 175.388C90.5065 175.388 91.6891 175.876 92.561 176.744C93.433 177.611 93.9228 178.788 93.9228 180.016V193.899C93.9214 195.126 93.4311 196.302 92.5595 197.17C91.6878 198.038 90.5061 198.526 89.2734 198.527Z" fill="#0B0C0C"/>
                                <path d="M101.672 198.527C100.439 198.526 99.2574 198.038 98.3858 197.17C97.5142 196.302 97.0239 195.126 97.0225 193.899V180.016C97.0225 178.788 97.5123 177.611 98.3842 176.744C99.2562 175.876 100.439 175.388 101.672 175.388C102.905 175.388 104.088 175.876 104.959 176.744C105.831 177.611 106.321 178.788 106.321 180.016V193.899C106.32 195.126 105.83 196.302 104.958 197.17C104.086 198.038 102.905 198.526 101.672 198.527Z" fill="#0B0C0C"/>
                                <path d="M114.07 198.527C112.838 198.526 111.656 198.038 110.784 197.17C109.913 196.302 109.422 195.126 109.421 193.899V180.016C109.421 178.788 109.911 177.611 110.783 176.744C111.655 175.876 112.837 175.388 114.07 175.388C115.303 175.388 116.486 175.876 117.358 176.744C118.23 177.611 118.72 178.788 118.72 180.016V193.899C118.718 195.126 118.228 196.302 117.356 197.17C116.485 198.038 115.303 198.526 114.07 198.527Z" fill="#0B0C0C"/>
                                <path d="M133.185 198.527C131.952 198.526 130.77 198.038 129.899 197.17C129.027 196.302 128.537 195.126 128.535 193.899V180.016C128.535 178.788 129.025 177.611 129.897 176.744C130.769 175.876 131.951 175.388 133.185 175.388C134.418 175.388 135.6 175.876 136.472 176.744C137.344 177.611 137.834 178.788 137.834 180.016V193.899C137.833 195.126 137.342 196.302 136.471 197.17C135.599 198.038 134.417 198.526 133.185 198.527Z" fill="#0B0C0C"/>
                                <path d="M145.583 198.527C144.35 198.526 143.169 198.038 142.297 197.17C141.425 196.302 140.935 195.126 140.934 193.899V180.016C140.934 178.788 141.423 177.611 142.295 176.744C143.167 175.876 144.35 175.388 145.583 175.388C146.816 175.388 147.999 175.876 148.871 176.744C149.743 177.611 150.232 178.788 150.232 180.016V193.899C150.231 195.126 149.741 196.302 148.869 197.17C147.997 198.038 146.816 198.526 145.583 198.527Z" fill="#0B0C0C"/>
                                <path d="M157.981 198.527C156.749 198.526 155.567 198.038 154.695 197.17C153.824 196.302 153.333 195.126 153.332 193.899V180.016C153.332 178.788 153.822 177.611 154.694 176.744C155.566 175.876 156.748 175.388 157.981 175.388C159.215 175.388 160.397 175.876 161.269 176.744C162.141 177.611 162.631 178.788 162.631 180.016V193.899C162.629 195.126 162.139 196.302 161.267 197.17C160.396 198.038 159.214 198.526 157.981 198.527Z" fill="#0B0C0C"/>
                                <path d="M177.096 198.527C175.863 198.526 174.681 198.038 173.81 197.17C172.938 196.302 172.448 195.126 172.446 193.899V180.016C172.446 178.788 172.936 177.611 173.808 176.744C174.68 175.876 175.863 175.388 177.096 175.388C178.329 175.388 179.511 175.876 180.383 176.744C181.255 177.611 181.745 178.788 181.745 180.016V193.899C181.744 195.126 181.253 196.302 180.382 197.17C179.51 198.038 178.328 198.526 177.096 198.527Z" fill="#0B0C0C"/>
                                <path d="M189.494 198.527C188.261 198.526 187.08 198.038 186.208 197.17C185.336 196.302 184.846 195.126 184.845 193.899V180.016C184.845 178.788 185.335 177.611 186.207 176.744C187.078 175.876 188.261 175.388 189.494 175.388C190.727 175.388 191.91 175.876 192.782 176.744C193.654 177.611 194.144 178.788 194.144 180.016V193.899C194.142 195.126 193.652 196.302 192.78 197.17C191.909 198.038 190.727 198.526 189.494 198.527Z" fill="#0B0C0C"/>
                                <path d="M201.893 198.527C200.66 198.526 199.478 198.038 198.607 197.17C197.735 196.302 197.245 195.126 197.243 193.899V180.016C197.243 178.788 197.733 177.611 198.605 176.744C199.477 175.876 200.659 175.388 201.893 175.388C203.126 175.388 204.308 175.876 205.18 176.744C206.052 177.611 206.542 178.788 206.542 180.016V193.899C206.541 195.126 206.05 196.302 205.179 197.17C204.307 198.038 203.125 198.526 201.893 198.527Z" fill="#0B0C0C"/>
                                <path d="M221.007 198.527C219.774 198.526 218.592 198.038 217.721 197.17C216.849 196.302 216.359 195.126 216.357 193.899V180.016C216.357 178.788 216.847 177.611 217.719 176.744C218.591 175.876 219.774 175.388 221.007 175.388C222.24 175.388 223.423 175.876 224.294 176.744C225.166 177.611 225.656 178.788 225.656 180.016V193.899C225.655 195.126 225.165 196.302 224.293 197.17C223.421 198.038 222.239 198.526 221.007 198.527Z" fill="#0B0C0C"/>
                                <path d="M233.405 198.527C232.173 198.526 230.991 198.038 230.119 197.17C229.248 196.302 228.757 195.126 228.756 193.899V180.016C228.756 178.788 229.246 177.611 230.118 176.744C230.99 175.876 232.172 175.388 233.405 175.388C234.638 175.388 235.821 175.876 236.693 176.744C237.565 177.611 238.055 178.788 238.055 180.016V193.899C238.053 195.126 237.563 196.302 236.691 197.17C235.82 198.038 234.638 198.526 233.405 198.527Z" fill="#0B0C0C"/>
                                <path d="M245.804 198.527C244.571 198.526 243.389 198.038 242.518 197.17C241.646 196.302 241.156 195.126 241.154 193.899V180.016C241.154 178.788 241.644 177.611 242.516 176.744C243.388 175.876 244.571 175.388 245.804 175.388C247.037 175.388 248.219 175.876 249.091 176.744C249.963 177.611 250.453 178.788 250.453 180.016V193.899C250.452 195.126 249.961 196.302 249.09 197.17C248.218 198.038 247.036 198.526 245.804 198.527Z" fill="#0B0C0C"/>
                                <path d="M120.796 250.033H53.9268C53.0982 250.033 52.3036 249.705 51.7178 249.122C51.1319 248.539 50.8027 247.748 50.8027 246.923C50.8027 246.098 51.1319 245.307 51.7178 244.724C52.3036 244.141 53.0982 243.813 53.9268 243.813H120.796C121.624 243.813 122.419 244.141 123.005 244.724C123.591 245.307 123.92 246.098 123.92 246.923C123.92 247.748 123.591 248.539 123.005 249.122C122.419 249.705 121.624 250.033 120.796 250.033Z" fill="#E6E6E6"/>
                                <path d="M99.3563 236.663H75.3653C74.5367 236.663 73.7421 236.336 73.1562 235.753C72.5704 235.17 72.2412 234.379 72.2412 233.554C72.2412 232.729 72.5704 231.938 73.1562 231.355C73.7421 230.772 74.5367 230.444 75.3653 230.444H99.3563C100.185 230.444 100.98 230.772 101.565 231.355C102.151 231.938 102.48 232.729 102.48 233.554C102.48 234.379 102.151 235.17 101.565 235.753C100.98 236.336 100.185 236.663 99.3563 236.663Z" fill="#E6E6E6"/>
                                <path d="M291.78 142.479H37.0967V143.508H291.78V142.479Z" fill="#3F3D56"/>
                                </g>
                                <defs>
                                <clipPath id="clip0_237_778">
                                <rect width="293" height="266" fill="white"/>
                                </clipPath>
                                </defs>
                            </svg>

                            <div className="paymentInfo">
                                <Form method="post" onSubmit={handleSubmit}>

                                    <h4>{t("card Info")}</h4>

                                    <div className="formContainer">


                        
                                        <label className="left">
                                            <input
                                                type="text"
                                                name="cardHolderName"
                                                placeholder={t("cardHolderName")}
                                                value={formData.cardHolderName}
                                                onChange={handleChange}
                                            />
                                            <p className="error">{t(errors.cardHolderName)}</p>
                                        </label>

                                        <label>
                                            <input
                                                type="text"
                                                name="cardNumber"
                                                placeholder={t("cardNumber")}
                                                value={formData.cardNumber}
                                                onChange={handleChange}
                                                onBlur={handleBlur}

                                            />
                                            <p className="error">{t(errors.cardNumber)}</p>

                                        </label>

                                        <label className="left">
                                            <input
                                                type="text"
                                                name="expirationDate"
                                                placeholder={t("expirationDate")}
                                                value={formData.expirationDate}
                                                onChange={handleChange}
                                                onBlur={handleBlur}

                                            />
                                            <p className="error"> {t(errors.expirationDate)}</p>
                                        </label>

                                        <label>
                                            <input
                                                type="password"
                                                name="cvv"
                                                placeholder={t("cvv")}
                                                value={formData.cvv}
                                                onChange={handleChange}
                                                onBlur={handleBlur}

                                            />
                                            <p className="error">{t(errors.cvv)}</p>
                                        </label>

                                    </div>

                                    <div className="bottom">

                                        <span>{t("total")} {costRef.current} €</span>

                                        <button className={submitting||paymentDone ||  cost==0?"submitting":""} type="submit">
                                            {t("payment")}
                                        </button>

                                    </div>

                                    <span className="message">{actionMessage=="-1"?"": t(actionMessage)||t(message)}</span>


                                </Form>
                            </div>


                        </div>


                        

                    </div>
              </section>
        
        </>
    )

}